/*
* generated by Xtext
*/
package org.xtext.rollercoaster.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CoasterGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRollerCoasterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRollerCoasterRollerCoasterParserRuleCall_0 = (RuleCall)cRollerCoasterAssignment.eContents().get(0);
		
		//Model:
		//	rollerCoaster+=RollerCoaster*;
		public ParserRule getRule() { return rule; }

		//rollerCoaster+=RollerCoaster*
		public Assignment getRollerCoasterAssignment() { return cRollerCoasterAssignment; }

		//RollerCoaster
		public RuleCall getRollerCoasterRollerCoasterParserRuleCall_0() { return cRollerCoasterRollerCoasterParserRuleCall_0; }
	}

	public class RollerCoasterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RollerCoaster");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollerCoasterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBaseQualityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseQualityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cBaseQualityAlternatives_4_0 = (Alternatives)cBaseQualityAssignment_4.eContents().get(0);
		private final Keyword cBaseQualityWoodKeyword_4_0_0 = (Keyword)cBaseQualityAlternatives_4_0.eContents().get(0);
		private final Keyword cBaseQualityIronKeyword_4_0_1 = (Keyword)cBaseQualityAlternatives_4_0.eContents().get(1);
		private final Keyword cBaseQualitySteelKeyword_4_0_2 = (Keyword)cBaseQualityAlternatives_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTrackKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTrackAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cTrackAlternatives_7_0 = (Alternatives)cTrackAssignment_7.eContents().get(0);
		private final RuleCall cTrackStraightParserRuleCall_7_0_0 = (RuleCall)cTrackAlternatives_7_0.eContents().get(0);
		private final RuleCall cTrackCornerParserRuleCall_7_0_1 = (RuleCall)cTrackAlternatives_7_0.eContents().get(1);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cCartsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCartAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCartCartParserRuleCall_10_0 = (RuleCall)cCartAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cTicketPriceKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cTicketPriceAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTicketPriceINTTerminalRuleCall_13_0 = (RuleCall)cTicketPriceAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cDefaultTrackUnitLengthKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cTrackUnitLengthAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cTrackUnitLengthINTTerminalRuleCall_16_0 = (RuleCall)cTrackUnitLengthAssignment_16.eContents().get(0);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//RollerCoaster:
		//	"RollerCoaster" name=ID ";" "Base Quality =" baseQuality=("wood" | "iron" | "steel") ";" "Track =(" track+=(Straight |
		//	Corner)* ");" "Carts =(" cart+=Cart* ");" "TicketPrice =" ticketPrice=INT ";" "DefaultTrackUnitLength ="
		//	trackUnitLength=INT ";";
		public ParserRule getRule() { return rule; }

		//"RollerCoaster" name=ID ";" "Base Quality =" baseQuality=("wood" | "iron" | "steel") ";" "Track =(" track+=(Straight |
		//Corner)* ");" "Carts =(" cart+=Cart* ");" "TicketPrice =" ticketPrice=INT ";" "DefaultTrackUnitLength ="
		//trackUnitLength=INT ";"
		public Group getGroup() { return cGroup; }

		//"RollerCoaster"
		public Keyword getRollerCoasterKeyword_0() { return cRollerCoasterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//"Base Quality ="
		public Keyword getBaseQualityKeyword_3() { return cBaseQualityKeyword_3; }

		//baseQuality=("wood" | "iron" | "steel")
		public Assignment getBaseQualityAssignment_4() { return cBaseQualityAssignment_4; }

		//"wood" | "iron" | "steel"
		public Alternatives getBaseQualityAlternatives_4_0() { return cBaseQualityAlternatives_4_0; }

		//"wood"
		public Keyword getBaseQualityWoodKeyword_4_0_0() { return cBaseQualityWoodKeyword_4_0_0; }

		//"iron"
		public Keyword getBaseQualityIronKeyword_4_0_1() { return cBaseQualityIronKeyword_4_0_1; }

		//"steel"
		public Keyword getBaseQualitySteelKeyword_4_0_2() { return cBaseQualitySteelKeyword_4_0_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"Track =("
		public Keyword getTrackKeyword_6() { return cTrackKeyword_6; }

		//track+=(Straight | Corner)*
		public Assignment getTrackAssignment_7() { return cTrackAssignment_7; }

		//Straight | Corner
		public Alternatives getTrackAlternatives_7_0() { return cTrackAlternatives_7_0; }

		//Straight
		public RuleCall getTrackStraightParserRuleCall_7_0_0() { return cTrackStraightParserRuleCall_7_0_0; }

		//Corner
		public RuleCall getTrackCornerParserRuleCall_7_0_1() { return cTrackCornerParserRuleCall_7_0_1; }

		//");"
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }

		//"Carts =("
		public Keyword getCartsKeyword_9() { return cCartsKeyword_9; }

		//cart+=Cart*
		public Assignment getCartAssignment_10() { return cCartAssignment_10; }

		//Cart
		public RuleCall getCartCartParserRuleCall_10_0() { return cCartCartParserRuleCall_10_0; }

		//");"
		public Keyword getRightParenthesisSemicolonKeyword_11() { return cRightParenthesisSemicolonKeyword_11; }

		//"TicketPrice ="
		public Keyword getTicketPriceKeyword_12() { return cTicketPriceKeyword_12; }

		//ticketPrice=INT
		public Assignment getTicketPriceAssignment_13() { return cTicketPriceAssignment_13; }

		//INT
		public RuleCall getTicketPriceINTTerminalRuleCall_13_0() { return cTicketPriceINTTerminalRuleCall_13_0; }

		//";"
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }

		//"DefaultTrackUnitLength ="
		public Keyword getDefaultTrackUnitLengthKeyword_15() { return cDefaultTrackUnitLengthKeyword_15; }

		//trackUnitLength=INT
		public Assignment getTrackUnitLengthAssignment_16() { return cTrackUnitLengthAssignment_16; }

		//INT
		public RuleCall getTrackUnitLengthINTTerminalRuleCall_16_0() { return cTrackUnitLengthINTTerminalRuleCall_16_0; }

		//";"
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }
	}

	public class StraightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Straight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStraightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPoweredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPoweredPoweredKeyword_2_0 = (Keyword)cPoweredAssignment_2.eContents().get(0);
		private final Assignment cQualityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cQualityAlternatives_3_0 = (Alternatives)cQualityAssignment_3.eContents().get(0);
		private final Keyword cQualityWoodKeyword_3_0_0 = (Keyword)cQualityAlternatives_3_0.eContents().get(0);
		private final Keyword cQualityIronKeyword_3_0_1 = (Keyword)cQualityAlternatives_3_0.eContents().get(1);
		private final Keyword cQualitySteelKeyword_3_0_2 = (Keyword)cQualityAlternatives_3_0.eContents().get(2);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthINTTerminalRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElevationChangeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElevationChangeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElevationChangeSignedIntParserRuleCall_6_1_0 = (RuleCall)cElevationChangeAssignment_6_1.eContents().get(0);
		
		//Straight:
		//	"Straight" name=ID powered="powered"? quality=("wood" | "iron" | "steel")? "length =" length=INT ("elevationChange ="
		//	elevationChange=SignedInt)?;
		public ParserRule getRule() { return rule; }

		//"Straight" name=ID powered="powered"? quality=("wood" | "iron" | "steel")? "length =" length=INT ("elevationChange ="
		//elevationChange=SignedInt)?
		public Group getGroup() { return cGroup; }

		//"Straight"
		public Keyword getStraightKeyword_0() { return cStraightKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//powered="powered"?
		public Assignment getPoweredAssignment_2() { return cPoweredAssignment_2; }

		//"powered"
		public Keyword getPoweredPoweredKeyword_2_0() { return cPoweredPoweredKeyword_2_0; }

		//quality=("wood" | "iron" | "steel")?
		public Assignment getQualityAssignment_3() { return cQualityAssignment_3; }

		//"wood" | "iron" | "steel"
		public Alternatives getQualityAlternatives_3_0() { return cQualityAlternatives_3_0; }

		//"wood"
		public Keyword getQualityWoodKeyword_3_0_0() { return cQualityWoodKeyword_3_0_0; }

		//"iron"
		public Keyword getQualityIronKeyword_3_0_1() { return cQualityIronKeyword_3_0_1; }

		//"steel"
		public Keyword getQualitySteelKeyword_3_0_2() { return cQualitySteelKeyword_3_0_2; }

		//"length ="
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }

		//length=INT
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_5_0() { return cLengthINTTerminalRuleCall_5_0; }

		//("elevationChange =" elevationChange=SignedInt)?
		public Group getGroup_6() { return cGroup_6; }

		//"elevationChange ="
		public Keyword getElevationChangeKeyword_6_0() { return cElevationChangeKeyword_6_0; }

		//elevationChange=SignedInt
		public Assignment getElevationChangeAssignment_6_1() { return cElevationChangeAssignment_6_1; }

		//SignedInt
		public RuleCall getElevationChangeSignedIntParserRuleCall_6_1_0() { return cElevationChangeSignedIntParserRuleCall_6_1_0; }
	}

	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCornerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDirectionAlternatives_2_0 = (Alternatives)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cDirectionLeftKeyword_2_0_0 = (Keyword)cDirectionAlternatives_2_0.eContents().get(0);
		private final Keyword cDirectionRightKeyword_2_0_1 = (Keyword)cDirectionAlternatives_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeSharp45Keyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeSharp90Keyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeEasy45Keyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		private final Keyword cTypeEasy90Keyword_3_0_3 = (Keyword)cTypeAlternatives_3_0.eContents().get(3);
		private final Assignment cQualityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cQualityAlternatives_4_0 = (Alternatives)cQualityAssignment_4.eContents().get(0);
		private final Keyword cQualityWoodKeyword_4_0_0 = (Keyword)cQualityAlternatives_4_0.eContents().get(0);
		private final Keyword cQualityIronKeyword_4_0_1 = (Keyword)cQualityAlternatives_4_0.eContents().get(1);
		private final Keyword cQualitySteelKeyword_4_0_2 = (Keyword)cQualityAlternatives_4_0.eContents().get(2);
		
		//Corner:
		//	"Corner" name=ID direction=("left" | "right") type=("sharp45" | "sharp90" | "easy45" | "easy90") quality=("wood" |
		//	"iron" | "steel")?;
		public ParserRule getRule() { return rule; }

		//"Corner" name=ID direction=("left" | "right") type=("sharp45" | "sharp90" | "easy45" | "easy90") quality=("wood" |
		//"iron" | "steel")?
		public Group getGroup() { return cGroup; }

		//"Corner"
		public Keyword getCornerKeyword_0() { return cCornerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//direction=("left" | "right")
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }

		//"left" | "right"
		public Alternatives getDirectionAlternatives_2_0() { return cDirectionAlternatives_2_0; }

		//"left"
		public Keyword getDirectionLeftKeyword_2_0_0() { return cDirectionLeftKeyword_2_0_0; }

		//"right"
		public Keyword getDirectionRightKeyword_2_0_1() { return cDirectionRightKeyword_2_0_1; }

		//type=("sharp45" | "sharp90" | "easy45" | "easy90")
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"sharp45" | "sharp90" | "easy45" | "easy90"
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//"sharp45"
		public Keyword getTypeSharp45Keyword_3_0_0() { return cTypeSharp45Keyword_3_0_0; }

		//"sharp90"
		public Keyword getTypeSharp90Keyword_3_0_1() { return cTypeSharp90Keyword_3_0_1; }

		//"easy45"
		public Keyword getTypeEasy45Keyword_3_0_2() { return cTypeEasy45Keyword_3_0_2; }

		//"easy90"
		public Keyword getTypeEasy90Keyword_3_0_3() { return cTypeEasy90Keyword_3_0_3; }

		//quality=("wood" | "iron" | "steel")?
		public Assignment getQualityAssignment_4() { return cQualityAssignment_4; }

		//"wood" | "iron" | "steel"
		public Alternatives getQualityAlternatives_4_0() { return cQualityAlternatives_4_0; }

		//"wood"
		public Keyword getQualityWoodKeyword_4_0_0() { return cQualityWoodKeyword_4_0_0; }

		//"iron"
		public Keyword getQualityIronKeyword_4_0_1() { return cQualityIronKeyword_4_0_1; }

		//"steel"
		public Keyword getQualitySteelKeyword_4_0_2() { return cQualitySteelKeyword_4_0_2; }
	}

	public class CartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cQualityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cQualityAlternatives_2_0 = (Alternatives)cQualityAssignment_2.eContents().get(0);
		private final Keyword cQualityWoodKeyword_2_0_0 = (Keyword)cQualityAlternatives_2_0.eContents().get(0);
		private final Keyword cQualityIronKeyword_2_0_1 = (Keyword)cQualityAlternatives_2_0.eContents().get(1);
		private final Keyword cQualitySteelKeyword_2_0_2 = (Keyword)cQualityAlternatives_2_0.eContents().get(2);
		private final Keyword cSeatsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSeatNumberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSeatNumberINTTerminalRuleCall_4_0 = (RuleCall)cSeatNumberAssignment_4.eContents().get(0);
		
		//Cart:
		//	"Cart" name=ID quality=("wood" | "iron" | "steel")? "seats =" seatNumber=INT;
		public ParserRule getRule() { return rule; }

		//"Cart" name=ID quality=("wood" | "iron" | "steel")? "seats =" seatNumber=INT
		public Group getGroup() { return cGroup; }

		//"Cart"
		public Keyword getCartKeyword_0() { return cCartKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//quality=("wood" | "iron" | "steel")?
		public Assignment getQualityAssignment_2() { return cQualityAssignment_2; }

		//"wood" | "iron" | "steel"
		public Alternatives getQualityAlternatives_2_0() { return cQualityAlternatives_2_0; }

		//"wood"
		public Keyword getQualityWoodKeyword_2_0_0() { return cQualityWoodKeyword_2_0_0; }

		//"iron"
		public Keyword getQualityIronKeyword_2_0_1() { return cQualityIronKeyword_2_0_1; }

		//"steel"
		public Keyword getQualitySteelKeyword_2_0_2() { return cQualitySteelKeyword_2_0_2; }

		//"seats ="
		public Keyword getSeatsKeyword_3() { return cSeatsKeyword_3; }

		//seatNumber=INT
		public Assignment getSeatNumberAssignment_4() { return cSeatNumberAssignment_4; }

		//INT
		public RuleCall getSeatNumberINTTerminalRuleCall_4_0() { return cSeatNumberINTTerminalRuleCall_4_0; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_0_0 = (Keyword)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SignedInt:
		//	sign="-"? value=INT;
		public ParserRule getRule() { return rule; }

		//sign="-"? value=INT
		public Group getGroup() { return cGroup; }

		//sign="-"?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//"-"
		public Keyword getSignHyphenMinusKeyword_0_0() { return cSignHyphenMinusKeyword_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private RollerCoasterElements pRollerCoaster;
	private StraightElements pStraight;
	private CornerElements pCorner;
	private CartElements pCart;
	private SignedIntElements pSignedInt;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CoasterGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.rollercoaster.dsl.Coaster".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rollerCoaster+=RollerCoaster*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//RollerCoaster:
	//	"RollerCoaster" name=ID ";" "Base Quality =" baseQuality=("wood" | "iron" | "steel") ";" "Track =(" track+=(Straight |
	//	Corner)* ");" "Carts =(" cart+=Cart* ");" "TicketPrice =" ticketPrice=INT ";" "DefaultTrackUnitLength ="
	//	trackUnitLength=INT ";";
	public RollerCoasterElements getRollerCoasterAccess() {
		return (pRollerCoaster != null) ? pRollerCoaster : (pRollerCoaster = new RollerCoasterElements());
	}
	
	public ParserRule getRollerCoasterRule() {
		return getRollerCoasterAccess().getRule();
	}

	//Straight:
	//	"Straight" name=ID powered="powered"? quality=("wood" | "iron" | "steel")? "length =" length=INT ("elevationChange ="
	//	elevationChange=SignedInt)?;
	public StraightElements getStraightAccess() {
		return (pStraight != null) ? pStraight : (pStraight = new StraightElements());
	}
	
	public ParserRule getStraightRule() {
		return getStraightAccess().getRule();
	}

	//Corner:
	//	"Corner" name=ID direction=("left" | "right") type=("sharp45" | "sharp90" | "easy45" | "easy90") quality=("wood" |
	//	"iron" | "steel")?;
	public CornerElements getCornerAccess() {
		return (pCorner != null) ? pCorner : (pCorner = new CornerElements());
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}

	//Cart:
	//	"Cart" name=ID quality=("wood" | "iron" | "steel")? "seats =" seatNumber=INT;
	public CartElements getCartAccess() {
		return (pCart != null) ? pCart : (pCart = new CartElements());
	}
	
	public ParserRule getCartRule() {
		return getCartAccess().getRule();
	}

	//SignedInt:
	//	sign="-"? value=INT;
	public SignedIntElements getSignedIntAccess() {
		return (pSignedInt != null) ? pSignedInt : (pSignedInt = new SignedIntElements());
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
