/*
* generated by Xtext
*/
grammar InternalCoaster;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.rollercoaster.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.rollercoaster.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.rollercoaster.dsl.services.CoasterGrammarAccess;

}

@parser::members {

 	private CoasterGrammarAccess grammarAccess;
 	
    public InternalCoasterParser(TokenStream input, CoasterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CoasterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); 
	    }
		lv_rollerCoaster_0_0=ruleRollerCoaster		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rollerCoaster",
        		lv_rollerCoaster_0_0, 
        		"RollerCoaster");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRollerCoaster
entryRuleRollerCoaster returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRollerCoasterRule()); }
	 iv_ruleRollerCoaster=ruleRollerCoaster 
	 { $current=$iv_ruleRollerCoaster.current; } 
	 EOF 
;

// Rule RollerCoaster
ruleRollerCoaster returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRollerCoasterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRollerCoasterAccess().getTrackTrackParserRuleCall_1_0()); 
	    }
		lv_track_1_0=ruleTrack		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRollerCoasterRule());
	        }
       		add(
       			$current, 
       			"track",
        		lv_track_1_0, 
        		"Track");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_2_0()); 
	    }
		lv_cart_2_0=ruleCart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRollerCoasterRule());
	        }
       		add(
       			$current, 
       			"cart",
        		lv_cart_2_0, 
        		"Cart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTrack
entryRuleTrack returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrackRule()); }
	 iv_ruleTrack=ruleTrack 
	 { $current=$iv_ruleTrack.current; } 
	 EOF 
;

// Rule Track
ruleTrack returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Track' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTrackAccess().getTrackKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTrackAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_length_2_0=RULE_INT
		{
			newLeafNode(lv_length_2_0, grammarAccess.getTrackAccess().getLengthINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"INT");
	    }

)
)(
(
		lv_elevationChange_3_0=RULE_INT
		{
			newLeafNode(lv_elevationChange_3_0, grammarAccess.getTrackAccess().getElevationChangeINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"elevationChange",
        		lv_elevationChange_3_0, 
        		"INT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTrackAccess().getAngleSignedIntParserRuleCall_4_0()); 
	    }
		lv_angle_4_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrackRule());
	        }
       		set(
       			$current, 
       			"angle",
        		lv_angle_4_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCart
entryRuleCart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCartRule()); }
	 iv_ruleCart=ruleCart 
	 { $current=$iv_ruleCart.current; } 
	 EOF 
;

// Rule Cart
ruleCart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Cart' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCartAccess().getCartKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); }
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current; } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sign_0_0=	'-' 
    {
        newLeafNode(lv_sign_0_0, grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignedIntRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_0_0, "-");
	    }

)
)?(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignedIntRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


