/*
* generated by Xtext
*/
grammar InternalCoaster;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.rollercoaster.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.rollercoaster.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.rollercoaster.dsl.services.CoasterGrammarAccess;

}

@parser::members {

 	private CoasterGrammarAccess grammarAccess;
 	
    public InternalCoasterParser(TokenStream input, CoasterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CoasterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); 
	    }
		lv_rollerCoaster_0_0=ruleRollerCoaster		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rollerCoaster",
        		lv_rollerCoaster_0_0, 
        		"RollerCoaster");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRollerCoaster
entryRuleRollerCoaster returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRollerCoasterRule()); }
	 iv_ruleRollerCoaster=ruleRollerCoaster 
	 { $current=$iv_ruleRollerCoaster.current; } 
	 EOF 
;

// Rule RollerCoaster
ruleRollerCoaster returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RollerCoaster' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRollerCoasterAccess().getRollerCoasterKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRollerCoasterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRollerCoasterAccess().getTrackStraightParserRuleCall_2_0_0()); 
	    }
		lv_track_2_1=ruleStraight		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRollerCoasterRule());
	        }
       		add(
       			$current, 
       			"track",
        		lv_track_2_1, 
        		"Straight");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRollerCoasterAccess().getTrackCornerParserRuleCall_2_0_1()); 
	    }
		lv_track_2_2=ruleCorner		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRollerCoasterRule());
	        }
       		add(
       			$current, 
       			"track",
        		lv_track_2_2, 
        		"Corner");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_3_0()); 
	    }
		lv_cart_3_0=ruleCart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRollerCoasterRule());
	        }
       		add(
       			$current, 
       			"cart",
        		lv_cart_3_0, 
        		"Cart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_trackUnitLength_4_0=RULE_INT
		{
			newLeafNode(lv_trackUnitLength_4_0, grammarAccess.getRollerCoasterAccess().getTrackUnitLengthINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRollerCoasterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"trackUnitLength",
        		lv_trackUnitLength_4_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleStraight
entryRuleStraight returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStraightRule()); }
	 iv_ruleStraight=ruleStraight 
	 { $current=$iv_ruleStraight.current; } 
	 EOF 
;

// Rule Straight
ruleStraight returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Straight' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStraightAccess().getStraightKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStraightAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStraightRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_length_2_0=RULE_INT
		{
			newLeafNode(lv_length_2_0, grammarAccess.getStraightAccess().getLengthINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStraightRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"INT");
	    }

)
)(
(
		lv_elevationChange_3_0=RULE_INT
		{
			newLeafNode(lv_elevationChange_3_0, grammarAccess.getStraightAccess().getElevationChangeINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStraightRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"elevationChange",
        		lv_elevationChange_3_0, 
        		"INT");
	    }

)
)?)
;





// Entry rule entryRuleCorner
entryRuleCorner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCornerRule()); }
	 iv_ruleCorner=ruleCorner 
	 { $current=$iv_ruleCorner.current; } 
	 EOF 
;

// Rule Corner
ruleCorner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Corner' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCornerAccess().getCornerKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCornerAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
(
		lv_direction_2_1=	'left' 
    {
        newLeafNode(lv_direction_2_1, grammarAccess.getCornerAccess().getDirectionLeftKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_2_1, null);
	    }

    |		lv_direction_2_2=	'right' 
    {
        newLeafNode(lv_direction_2_2, grammarAccess.getCornerAccess().getDirectionRightKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_2_2, null);
	    }

)

)
)(
(
(
		lv_type_3_1=	'sharp45' 
    {
        newLeafNode(lv_type_3_1, grammarAccess.getCornerAccess().getTypeSharp45Keyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_1, null);
	    }

    |		lv_type_3_2=	'sharp90' 
    {
        newLeafNode(lv_type_3_2, grammarAccess.getCornerAccess().getTypeSharp90Keyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_2, null);
	    }

    |		lv_type_3_3=	'easy45' 
    {
        newLeafNode(lv_type_3_3, grammarAccess.getCornerAccess().getTypeEasy45Keyword_3_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_3, null);
	    }

    |		lv_type_3_4=	'easy90' 
    {
        newLeafNode(lv_type_3_4, grammarAccess.getCornerAccess().getTypeEasy90Keyword_3_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCornerRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_4, null);
	    }

)

)
))
;





// Entry rule entryRuleCart
entryRuleCart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCartRule()); }
	 iv_ruleCart=ruleCart 
	 { $current=$iv_ruleCart.current; } 
	 EOF 
;

// Rule Cart
ruleCart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Cart' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCartAccess().getCartKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


