/**
 * generated by Xtext
 */
package org.xtext.rollercoaster.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Date;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.rollercoaster.dsl.coaster.Cart;
import org.xtext.rollercoaster.dsl.coaster.Corner;
import org.xtext.rollercoaster.dsl.coaster.RollerCoaster;
import org.xtext.rollercoaster.dsl.coaster.Straight;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CoasterGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    String _plus = ("RollerCoasterReport" + ".html");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<RollerCoaster> _filter = Iterables.<RollerCoaster>filter(_iterable, RollerCoaster.class);
    RollerCoaster _head = IterableExtensions.<RollerCoaster>head(_filter);
    CharSequence _genReport = this.genReport(_head);
    fsa.generateFile(_plus, _genReport);
  }
  
  /**
   * Generate an html report of the coasters stats
   * For starting off this is going to include the
   * 	Max Speed
   * 	Cost
   * 	Fun
   * 	Name
   */
  public CharSequence genReport(final RollerCoaster rc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1>Roller Coaster report for the ");
    String _name = rc.getName();
    _builder.append(_name, "		");
    _builder.append(" roller coaster on the  ");
    Date _date = new Date();
    _builder.append(_date, "		");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<p>Number of Pieces of track \t: ");
    EList<EObject> _track = rc.getTrack();
    int _length = ((Object[])Conversions.unwrapArray(_track, Object.class)).length;
    _builder.append(_length, "		");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<p>Number of Carts \t\t\t: ");
    EList<Cart> _cart = rc.getCart();
    int _length_1 = ((Object[])Conversions.unwrapArray(_cart, Object.class)).length;
    _builder.append(_length_1, "		");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1> Rendering of the track </h1>");
    _builder.newLine();
    _builder.append("  \t\t\t\t");
    EList<EObject> _track_1 = rc.getTrack();
    String _pathForTrack = this.getPathForTrack(_track_1);
    _builder.append(_pathForTrack, "  				");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>\t");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Build a svg path from a list of tracks
   */
  public String getPathForTrack(final Iterable<EObject> tracks) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<svg width=\"800px\" height=\"600px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"> ");
      final String start = _builder.toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("<path d=\" M 400 300 ");
      final String pathStart = _builder_1.toString();
      String path = "";
      double currentAngle = 0.0;
      for (final EObject trackPiece : tracks) {
        String _switchResult = null;
        boolean _matched = false;
        if (!_matched) {
          if (trackPiece instanceof Straight) {
            final Straight _straight = (Straight)trackPiece;
            _matched=true;
            String _xblockexpression_1 = null;
            {
              InputOutput.<String>println("Straight Piece of Track");
              InputOutput.<Double>println(Double.valueOf(currentAngle));
              final int length = _straight.getLength();
              double _radians = Math.toRadians(currentAngle);
              double _sin = Math.sin(_radians);
              final double endX = (_sin * length);
              double _radians_1 = Math.toRadians(currentAngle);
              double _cos = Math.cos(_radians_1);
              final double endY = (_cos * length);
              String _plus = (" l " + Double.valueOf(endX));
              String _plus_1 = (_plus + " ");
              String _plus_2 = (_plus_1 + Double.valueOf(endY));
              _xblockexpression_1 = (_plus_2);
            }
            _switchResult = _xblockexpression_1;
          }
        }
        if (!_matched) {
          if (trackPiece instanceof Corner) {
            final Corner _corner = (Corner)trackPiece;
            _matched=true;
            String _xblockexpression_1 = null;
            {
              final String arcSize = " 100 100 ";
              Integer _switchResult_1 = null;
              String _direction = _corner.getDirection();
              final String _switchValue = _direction;
              boolean _matched_1 = false;
              if (!_matched_1) {
                if (Objects.equal(_switchValue,"left")) {
                  _matched_1=true;
                  int _minus = (-1);
                  _switchResult_1 = Integer.valueOf(_minus);
                }
              }
              if (!_matched_1) {
                if (Objects.equal(_switchValue,"right")) {
                  _matched_1=true;
                  _switchResult_1 = Integer.valueOf(1);
                }
              }
              final Integer modifier = _switchResult_1;
              String _switchResult_2 = null;
              String _direction_1 = _corner.getDirection();
              final String _switchValue_1 = _direction_1;
              boolean _matched_2 = false;
              if (!_matched_2) {
                if (Objects.equal(_switchValue_1,"left")) {
                  _matched_2=true;
                  _switchResult_2 = " 0 0 1 ";
                }
              }
              if (!_matched_2) {
                if (Objects.equal(_switchValue_1,"right")) {
                  _matched_2=true;
                  _switchResult_2 = " 0 0 0 ";
                }
              }
              final String flags = _switchResult_2;
              int x = 0;
              int y = 0;
              double angle = 0.0;
              String _type = _corner.getType();
              final String _switchValue_2 = _type;
              boolean _matched_3 = false;
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"sharp45")) {
                  _matched_3=true;
                  x = 25;
                  y = 50;
                  angle = 22.5;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"sharp90")) {
                  _matched_3=true;
                  x = 50;
                  y = 50;
                  angle = 45;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"easy45")) {
                  _matched_3=true;
                  x = 50;
                  y = 100;
                  angle = 22.5;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"easy90")) {
                  _matched_3=true;
                  x = 100;
                  y = 100;
                  angle = 45;
                }
              }
              String _type_1 = _corner.getType();
              String _plus = (_type_1 + ", X:");
              String _plus_1 = (_plus + Integer.valueOf(x));
              String _plus_2 = (_plus_1 + ", Y:");
              String _plus_3 = (_plus_2 + Integer.valueOf(y));
              String _plus_4 = (_plus_3 + ", A ");
              String _plus_5 = (_plus_4 + Double.valueOf(angle));
              InputOutput.<String>println(_plus_5);
              double _plus_6 = (angle + currentAngle);
              double _multiply = ((modifier).intValue() * _plus_6);
              double _radians = Math.toRadians(_multiply);
              double _sin = Math.sin(_radians);
              int _multiply_1 = (x * x);
              int _multiply_2 = (y * y);
              int _plus_7 = (_multiply_1 + _multiply_2);
              double _sqrt = Math.sqrt(_plus_7);
              final double endX = (_sin * _sqrt);
              double _plus_8 = (angle + currentAngle);
              double _multiply_3 = ((modifier).intValue() * _plus_8);
              double _radians_1 = Math.toRadians(_multiply_3);
              double _cos = Math.cos(_radians_1);
              int _multiply_4 = (x * x);
              int _multiply_5 = (y * y);
              int _plus_9 = (_multiply_4 + _multiply_5);
              double _sqrt_1 = Math.sqrt(_plus_9);
              final double endY = (_cos * _sqrt_1);
              String _plus_10 = ("End X:" + Double.valueOf(endX));
              String _plus_11 = (_plus_10 + ", EndY:");
              String _plus_12 = (_plus_11 + Double.valueOf(endY));
              InputOutput.<String>println(_plus_12);
              double _multiply_6 = (angle * 2);
              double _multiply_7 = (_multiply_6 * (modifier).intValue());
              double _plus_13 = (currentAngle + _multiply_7);
              currentAngle = _plus_13;
              InputOutput.<String>println("Corner");
              String _plus_14 = (" a " + arcSize);
              String _plus_15 = (_plus_14 + " ");
              String _plus_16 = (_plus_15 + flags);
              String _plus_17 = (_plus_16 + " ");
              String _plus_18 = (_plus_17 + Double.valueOf(endX));
              String _plus_19 = (_plus_18 + " ");
              String _plus_20 = (_plus_19 + Double.valueOf(endY));
              String arc = (_plus_20 + " ");
              InputOutput.<String>println(arc);
              _xblockexpression_1 = (arc);
            }
            _switchResult = _xblockexpression_1;
          }
        }
        String _plus = (path + _switchResult);
        path = _plus;
      }
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\"stroke=\"black\" fill=\"transparent\"/>");
      final String pathEnd = _builder_2.toString();
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("</svg>");
      String end = _builder_3.toString();
      String _plus_1 = (start + pathStart);
      String _plus_2 = (_plus_1 + path);
      String _plus_3 = (_plus_2 + pathEnd);
      String _plus_4 = (_plus_3 + end);
      _xblockexpression = (_plus_4);
    }
    return _xblockexpression;
  }
}
