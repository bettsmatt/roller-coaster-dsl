/**
 * generated by Xtext
 */
package org.xtext.rollercoaster.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.rollercoaster.dsl.coaster.Cart;
import org.xtext.rollercoaster.dsl.coaster.Corner;
import org.xtext.rollercoaster.dsl.coaster.RollerCoaster;
import org.xtext.rollercoaster.dsl.coaster.Straight;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CoasterGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<RollerCoaster> _filter = Iterables.<RollerCoaster>filter(_iterable, RollerCoaster.class);
    final Procedure1<RollerCoaster> _function = new Procedure1<RollerCoaster>() {
        public void apply(final RollerCoaster rc) {
          String _name = rc.getName();
          String _plus = (_name + ".html");
          String _genReport = CoasterGenerator.this.genReport(rc);
          fsa.generateFile(_plus, _genReport);
        }
      };
    IterableExtensions.<RollerCoaster>forEach(_filter, _function);
  }
  
  /**
   * Generate an html report of the coasters stats
   * For starting off this is going to include the
   * 	Max Speed
   * 	Cost
   * 	Fun
   * 	Name
   */
  public String genReport(final RollerCoaster rc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("<div class=\"row\"> ");
    String _genTitle = this.genTitle(rc);
    String _plus = (_builder.toString() + _genTitle);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</div> ");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("<div class=\"row\">");
    _builder_1.newLine();
    _builder_1.append("  \t\t\t\t");
    _builder_1.append("<div class=\"col-md-6\">");
    String _plus_1 = (_plus + _builder_1);
    String _pathForTrack = this.getPathForTrack(rc);
    String _plus_2 = (_plus_1 + _pathForTrack);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</div>");
    _builder_2.newLine();
    _builder_2.append("  \t\t\t\t");
    _builder_2.append("<div class=\"col-md-6\"> ");
    String _plus_3 = (_plus_2 + _builder_2);
    String _genSummary = this.genSummary(rc);
    String _plus_4 = (_plus_3 + _genSummary);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</div>");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("</div>");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("<div class=\"row\"> ");
    String _plus_5 = (_plus_4 + _builder_3);
    CharSequence _genFinincial = this.genFinincial(rc);
    String _plus_6 = (_plus_5 + _genFinincial);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("</div> ");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.newLine();
    String report = (_plus_6 + _builder_4);
    return this.addIntoBootstrapTemplate(report);
  }
  
  /**
   * Generate the title information
   */
  public String genTitle(final RollerCoaster rc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h1> ");
    String _name = rc.getName();
    String _plus = (_builder.toString() + _name);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</h1>");
    String _plus_1 = (_plus + _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<p> ");
    String _plus_2 = (_plus_1 + _builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("Roller Coaster Report");
    String _plus_3 = (_plus_2 + _builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("</p>");
    String _plus_4 = (_plus_3 + _builder_4);
    return _plus_4;
  }
  
  public String genSummary(final RollerCoaster rc) {
    String _xblockexpression = null;
    {
      EList<EObject> _track = rc.getTrack();
      final int pieces = ((Object[])Conversions.unwrapArray(_track, Object.class)).length;
      EList<Cart> _cart = rc.getCart();
      final int carts = ((Object[])Conversions.unwrapArray(_cart, Object.class)).length;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<h1> Summary </h1>");
      _builder.newLine();
      _builder.append("<ul class=\"list-group\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<li class=\"list-group-item\">");
      String _plus = (_builder.toString() + Integer.valueOf(pieces));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(" ");
      _builder_1.append("pieces of track </li>");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("<li class=\"list-group-item\">");
      String _plus_1 = (_plus + _builder_1);
      String _plus_2 = (_plus_1 + Integer.valueOf(carts));
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append(" ");
      _builder_2.append("carts </li>");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("<li class=\"list-group-item\">Morbi leo risus</li>");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("<li class=\"list-group-item\">Porta ac consectetur ac</li>");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("<li class=\"list-group-item\">Vestibulum at eros</li>");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("</ul>");
      _builder_2.newLine();
      String _plus_3 = (_plus_2 + _builder_2);
      _xblockexpression = (_plus_3);
    }
    return _xblockexpression;
  }
  
  public CharSequence genFinincial(final RollerCoaster rc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Finincials Goes Here");
    return _builder;
  }
  
  /**
   * Build a svg path from a list of tracks
   */
  public String getPathForTrack(final RollerCoaster rc) {
    String _xblockexpression = null;
    {
      EList<EObject> tracks = rc.getTrack();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<svg width=\"100%\" height=\"400px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"> ");
      final String start = _builder.toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("<circle xmlns=\"http://www.w3.org/2000/svg\" cx=\"100\" cy=\"100\" r=\"4\" fill=\"#ff0000\" stroke=\"#000000\" stroke-width=\"2\"/>");
      final String zeroZeroPoint = _builder_1.toString();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("<path d=\" M 100 100 ");
      final String pathStart = _builder_2.toString();
      String path = "";
      double currentAngle = 0.0;
      for (final EObject trackPiece : tracks) {
        String _switchResult = null;
        boolean _matched = false;
        if (!_matched) {
          if (trackPiece instanceof Straight) {
            final Straight _straight = (Straight)trackPiece;
            _matched=true;
            String _xblockexpression_1 = null;
            {
              final int length = _straight.getLength();
              double _radians = Math.toRadians(currentAngle);
              double _sin = Math.sin(_radians);
              final double endX = (_sin * length);
              double _radians_1 = Math.toRadians(currentAngle);
              double _cos = Math.cos(_radians_1);
              final double endY = (_cos * length);
              String _plus = (" l " + Double.valueOf(endX));
              String _plus_1 = (_plus + " ");
              String _plus_2 = (_plus_1 + Double.valueOf(endY));
              _xblockexpression_1 = (_plus_2);
            }
            _switchResult = _xblockexpression_1;
          }
        }
        if (!_matched) {
          if (trackPiece instanceof Corner) {
            final Corner _corner = (Corner)trackPiece;
            _matched=true;
            String _xblockexpression_1 = null;
            {
              String arcSize = " 0 0 ";
              Integer _switchResult_1 = null;
              String _direction = _corner.getDirection();
              final String _switchValue = _direction;
              boolean _matched_1 = false;
              if (!_matched_1) {
                if (Objects.equal(_switchValue,"left")) {
                  _matched_1=true;
                  _switchResult_1 = Integer.valueOf(1);
                }
              }
              if (!_matched_1) {
                if (Objects.equal(_switchValue,"right")) {
                  _matched_1=true;
                  int _minus = (-1);
                  _switchResult_1 = Integer.valueOf(_minus);
                }
              }
              final Integer modifier = _switchResult_1;
              String _switchResult_2 = null;
              String _direction_1 = _corner.getDirection();
              final String _switchValue_1 = _direction_1;
              boolean _matched_2 = false;
              if (!_matched_2) {
                if (Objects.equal(_switchValue_1,"left")) {
                  _matched_2=true;
                  _switchResult_2 = " 0 0 0 ";
                }
              }
              if (!_matched_2) {
                if (Objects.equal(_switchValue_1,"right")) {
                  _matched_2=true;
                  _switchResult_2 = " 0 0 1 ";
                }
              }
              final String flags = _switchResult_2;
              int x = 0;
              int y = 0;
              double angle = 0.0;
              int r = rc.getTrackUnitLength();
              String _type = _corner.getType();
              final String _switchValue_2 = _type;
              boolean _matched_3 = false;
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"sharp45")) {
                  _matched_3=true;
                  int _divide = (r / 2);
                  x = _divide;
                  y = r;
                  angle = 22.5;
                  String _plus = (" " + Integer.valueOf(y));
                  String _plus_1 = (_plus + " ");
                  String _plus_2 = (_plus_1 + Integer.valueOf(y));
                  String _plus_3 = (_plus_2 + " ");
                  arcSize = _plus_3;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"sharp90")) {
                  _matched_3=true;
                  int _divide_1 = (r / 2);
                  x = _divide_1;
                  int _divide_2 = (r / 2);
                  y = _divide_2;
                  angle = 45;
                  String _plus_4 = (" " + Integer.valueOf(y));
                  String _plus_5 = (_plus_4 + " ");
                  String _plus_6 = (_plus_5 + Integer.valueOf(y));
                  String _plus_7 = (_plus_6 + " ");
                  arcSize = _plus_7;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"easy45")) {
                  _matched_3=true;
                  int _divide_3 = (r / 2);
                  x = _divide_3;
                  y = r;
                  angle = 22.5;
                  String _plus_8 = (" " + Integer.valueOf(y));
                  String _plus_9 = (_plus_8 + " ");
                  String _plus_10 = (_plus_9 + Integer.valueOf(y));
                  String _plus_11 = (_plus_10 + " ");
                  arcSize = _plus_11;
                }
              }
              if (!_matched_3) {
                if (Objects.equal(_switchValue_2,"easy90")) {
                  _matched_3=true;
                  x = r;
                  y = r;
                  angle = 45;
                  String _plus_12 = (" " + Integer.valueOf(y));
                  String _plus_13 = (_plus_12 + " ");
                  String _plus_14 = (_plus_13 + Integer.valueOf(y));
                  String _plus_15 = (_plus_14 + " ");
                  arcSize = _plus_15;
                }
              }
              double _multiply = ((modifier).intValue() * angle);
              double _plus_16 = (_multiply + currentAngle);
              double _radians = Math.toRadians(_plus_16);
              double _sin = Math.sin(_radians);
              int _multiply_1 = (x * x);
              int _multiply_2 = (y * y);
              int _plus_17 = (_multiply_1 + _multiply_2);
              double _sqrt = Math.sqrt(_plus_17);
              final double endX = (_sin * _sqrt);
              double _multiply_3 = ((modifier).intValue() * angle);
              double _plus_18 = (_multiply_3 + currentAngle);
              double _radians_1 = Math.toRadians(_plus_18);
              double _cos = Math.cos(_radians_1);
              int _multiply_4 = (x * x);
              int _multiply_5 = (y * y);
              int _plus_19 = (_multiply_4 + _multiply_5);
              double _sqrt_1 = Math.sqrt(_plus_19);
              final double endY = (_cos * _sqrt_1);
              double _multiply_6 = (angle * 2);
              double _multiply_7 = (_multiply_6 * (modifier).intValue());
              double _plus_20 = (currentAngle + _multiply_7);
              currentAngle = _plus_20;
              String _plus_21 = (" a " + arcSize);
              String _plus_22 = (_plus_21 + " ");
              String _plus_23 = (_plus_22 + flags);
              String _plus_24 = (_plus_23 + " ");
              String _plus_25 = (_plus_24 + Double.valueOf(endX));
              String _plus_26 = (_plus_25 + " ");
              String _plus_27 = (_plus_26 + Double.valueOf(endY));
              String _plus_28 = (_plus_27 + " ");
              _xblockexpression_1 = (_plus_28);
            }
            _switchResult = _xblockexpression_1;
          }
        }
        String _plus = (path + _switchResult);
        path = _plus;
      }
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("\"stroke=\"black\" fill=\"transparent\"/>");
      final String pathEnd = _builder_3.toString();
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("</svg>");
      String end = _builder_4.toString();
      String _plus_1 = (start + zeroZeroPoint);
      String _plus_2 = (_plus_1 + pathStart);
      String _plus_3 = (_plus_2 + path);
      String _plus_4 = (_plus_3 + pathEnd);
      String _plus_5 = (_plus_4 + end);
      _xblockexpression = (_plus_5);
    }
    return _xblockexpression;
  }
  
  /**
   * This method injects what ever HTML we have into the content part of a bootstrap basic template.
   * There may be better ways to do this like a web api, but given the scope of the project this will do.
   */
  public String addIntoBootstrapTemplate(final String content) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<!-- saved from url=(0050)http://getbootstrap.com/examples/starter-template/ -->");
    _builder.newLine();
    _builder.append("<html lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta name=\"description\" content=\"\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<meta name=\"author\" content=\"\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<link rel=\"shortcut icon\" href=\"http://getbootstrap.com/assets/ico/favicon.png\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<title>Roller Coaster Report</title>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Bootstrap core CSS -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<link href=\"http://getbootstrap.com/dist/css/bootstrap.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Custom styles for this template -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<link href=\"http://getbootstrap.com/examples/starter-template/starter-template.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--[if lt IE 9]>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"../../assets/js/html5shiv.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"../../assets/js/respond.min.js\"></script>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<body style=\"\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"navbar navbar-inverse navbar-fixed-top\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-header\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</button>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<a class=\"navbar-brand\" href=\"http://getbootstrap.com/examples/starter-template/#\">Roller Coaster Report</a>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"collapse navbar-collapse\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<ul class=\"nav navbar-nav\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li class=\"active\"><a href=\"http://getbootstrap.com/examples/starter-template/#\">Preview</a></li>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"http://getbootstrap.com/examples/starter-template/#about\">Statistics</a></li>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"http://getbootstrap.com/examples/starter-template/#contact\">Finincials</a></li>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div><!--/.nav-collapse -->");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"starter-template\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h1>Bootstrap starter template</h1>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<p class=\"lead\">Use this document as a way to quickly start any new project.<br> All you get is this text and a mostly barebones HTML document.</p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div> ");
    String _plus = (_builder.toString() + content);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("    ");
    _builder_1.append("</div><!-- /.container -->");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<!-- Bootstrap core JavaScript");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("================================================== -->");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<!-- Placed at the end of the document so the pages load faster -->");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<script src=\"./Starter Template for Bootstrap_files/jquery.js\"></script>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<script src=\"./Starter Template for Bootstrap_files/bootstrap.min.js\"></script>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("</body>");
    _builder_1.newLine();
    _builder_1.append("</html>");
    _builder_1.newLine();
    String _plus_1 = (_plus + _builder_1);
    return _plus_1;
  }
}
