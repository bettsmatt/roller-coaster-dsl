/*
* generated by Xtext
*/
grammar InternalCoaster;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.rollercoaster.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.rollercoaster.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.rollercoaster.dsl.services.CoasterGrammarAccess;

}

@parser::members {
 
 	private CoasterGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CoasterGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getRollerCoasterAssignment()); }
(rule__Model__RollerCoasterAssignment)
{ after(grammarAccess.getModelAccess().getRollerCoasterAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRollerCoaster
entryRuleRollerCoaster 
:
{ before(grammarAccess.getRollerCoasterRule()); }
	 ruleRollerCoaster
{ after(grammarAccess.getRollerCoasterRule()); } 
	 EOF 
;

// Rule RollerCoaster
ruleRollerCoaster
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRollerCoasterAccess().getGroup()); }
(rule__RollerCoaster__Group__0)
{ after(grammarAccess.getRollerCoasterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrack
entryRuleTrack 
:
{ before(grammarAccess.getTrackRule()); }
	 ruleTrack
{ after(grammarAccess.getTrackRule()); } 
	 EOF 
;

// Rule Track
ruleTrack
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrackAccess().getGroup()); }
(rule__Track__Group__0)
{ after(grammarAccess.getTrackAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCart
entryRuleCart 
:
{ before(grammarAccess.getCartRule()); }
	 ruleCart
{ after(grammarAccess.getCartRule()); } 
	 EOF 
;

// Rule Cart
ruleCart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCartAccess().getGroup()); }
(rule__Cart__Group__0)
{ after(grammarAccess.getCartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RollerCoaster__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__0__Impl
	rule__RollerCoaster__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getNameAssignment_0()); }
(rule__RollerCoaster__NameAssignment_0)
{ after(grammarAccess.getRollerCoasterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__1__Impl
	rule__RollerCoaster__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackAssignment_1()); }
(rule__RollerCoaster__TrackAssignment_1)*
{ after(grammarAccess.getRollerCoasterAccess().getTrackAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getCartAssignment_2()); }
(rule__RollerCoaster__CartAssignment_2)*
{ after(grammarAccess.getRollerCoasterAccess().getCartAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Track__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Track__Group__0__Impl
	rule__Track__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getTrackKeyword_0()); }

	'Track' 

{ after(grammarAccess.getTrackAccess().getTrackKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Track__Group__1__Impl
	rule__Track__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getNameAssignment_1()); }
(rule__Track__NameAssignment_1)
{ after(grammarAccess.getTrackAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Track__Group__2__Impl
	rule__Track__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getLengthAssignment_2()); }
(rule__Track__LengthAssignment_2)
{ after(grammarAccess.getTrackAccess().getLengthAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Track__Group__3__Impl
	rule__Track__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getElevationChangeAssignment_3()); }
(rule__Track__ElevationChangeAssignment_3)?
{ after(grammarAccess.getTrackAccess().getElevationChangeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Track__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getAngleAssignment_4()); }
(rule__Track__AngleAssignment_4)?
{ after(grammarAccess.getTrackAccess().getAngleAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Cart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cart__Group__0__Impl
	rule__Cart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getCartKeyword_0()); }

	'Cart' 

{ after(grammarAccess.getCartAccess().getCartKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getNameAssignment_1()); }
(rule__Cart__NameAssignment_1)
{ after(grammarAccess.getCartAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
(rule__SignedInt__SignAssignment_0)?
{ after(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
(rule__SignedInt__ValueAssignment_1)
{ after(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__RollerCoasterAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); }
	ruleRollerCoaster{ after(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__TrackAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackTrackParserRuleCall_1_0()); }
	ruleTrack{ after(grammarAccess.getRollerCoasterAccess().getTrackTrackParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__CartAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_2_0()); }
	ruleCart{ after(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Track__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTrackAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Track__LengthAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getLengthINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getTrackAccess().getLengthINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Track__ElevationChangeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getElevationChangeINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getTrackAccess().getElevationChangeINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Track__AngleAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrackAccess().getAngleSignedIntParserRuleCall_4_0()); }
	ruleSignedInt{ after(grammarAccess.getTrackAccess().getAngleSignedIntParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


