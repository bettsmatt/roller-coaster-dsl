/*
* generated by Xtext
*/
grammar InternalCoaster;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.rollercoaster.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.rollercoaster.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.rollercoaster.dsl.services.CoasterGrammarAccess;

}

@parser::members {
 
 	private CoasterGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CoasterGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getRollerCoasterAssignment()); }
(rule__Model__RollerCoasterAssignment)
{ after(grammarAccess.getModelAccess().getRollerCoasterAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRollerCoaster
entryRuleRollerCoaster 
:
{ before(grammarAccess.getRollerCoasterRule()); }
	 ruleRollerCoaster
{ after(grammarAccess.getRollerCoasterRule()); } 
	 EOF 
;

// Rule RollerCoaster
ruleRollerCoaster
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRollerCoasterAccess().getGroup()); }
(rule__RollerCoaster__Group__0)
{ after(grammarAccess.getRollerCoasterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStraight
entryRuleStraight 
:
{ before(grammarAccess.getStraightRule()); }
	 ruleStraight
{ after(grammarAccess.getStraightRule()); } 
	 EOF 
;

// Rule Straight
ruleStraight
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStraightAccess().getGroup()); }
(rule__Straight__Group__0)
{ after(grammarAccess.getStraightAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCorner
entryRuleCorner 
:
{ before(grammarAccess.getCornerRule()); }
	 ruleCorner
{ after(grammarAccess.getCornerRule()); } 
	 EOF 
;

// Rule Corner
ruleCorner
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCornerAccess().getGroup()); }
(rule__Corner__Group__0)
{ after(grammarAccess.getCornerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCart
entryRuleCart 
:
{ before(grammarAccess.getCartRule()); }
	 ruleCart
{ after(grammarAccess.getCartRule()); } 
	 EOF 
;

// Rule Cart
ruleCart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCartAccess().getGroup()); }
(rule__Cart__Group__0)
{ after(grammarAccess.getCartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RollerCoaster__TrackAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackStraightParserRuleCall_2_0_0()); }
	ruleStraight
{ after(grammarAccess.getRollerCoasterAccess().getTrackStraightParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getRollerCoasterAccess().getTrackCornerParserRuleCall_2_0_1()); }
	ruleCorner
{ after(grammarAccess.getRollerCoasterAccess().getTrackCornerParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__DirectionAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getDirectionLeftKeyword_2_0_0()); }

	'left' 

{ after(grammarAccess.getCornerAccess().getDirectionLeftKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getCornerAccess().getDirectionRightKeyword_2_0_1()); }

	'right' 

{ after(grammarAccess.getCornerAccess().getDirectionRightKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__TypeAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getTypeSharp45Keyword_3_0_0()); }

	'sharp45' 

{ after(grammarAccess.getCornerAccess().getTypeSharp45Keyword_3_0_0()); }
)

    |(
{ before(grammarAccess.getCornerAccess().getTypeSharp90Keyword_3_0_1()); }

	'sharp90' 

{ after(grammarAccess.getCornerAccess().getTypeSharp90Keyword_3_0_1()); }
)

    |(
{ before(grammarAccess.getCornerAccess().getTypeEasy45Keyword_3_0_2()); }

	'easy45' 

{ after(grammarAccess.getCornerAccess().getTypeEasy45Keyword_3_0_2()); }
)

    |(
{ before(grammarAccess.getCornerAccess().getTypeEasy90Keyword_3_0_3()); }

	'easy90' 

{ after(grammarAccess.getCornerAccess().getTypeEasy90Keyword_3_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RollerCoaster__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__0__Impl
	rule__RollerCoaster__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getRollerCoasterKeyword_0()); }

	'RollerCoaster' 

{ after(grammarAccess.getRollerCoasterAccess().getRollerCoasterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__1__Impl
	rule__RollerCoaster__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getNameAssignment_1()); }
(rule__RollerCoaster__NameAssignment_1)
{ after(grammarAccess.getRollerCoasterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__2__Impl
	rule__RollerCoaster__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackAssignment_2()); }
(rule__RollerCoaster__TrackAssignment_2)*
{ after(grammarAccess.getRollerCoasterAccess().getTrackAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__3__Impl
	rule__RollerCoaster__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getCartAssignment_3()); }
(rule__RollerCoaster__CartAssignment_3)*
{ after(grammarAccess.getRollerCoasterAccess().getCartAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RollerCoaster__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RollerCoaster__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackUnitLengthAssignment_4()); }
(rule__RollerCoaster__TrackUnitLengthAssignment_4)
{ after(grammarAccess.getRollerCoasterAccess().getTrackUnitLengthAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Straight__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Straight__Group__0__Impl
	rule__Straight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getStraightKeyword_0()); }

	'Straight' 

{ after(grammarAccess.getStraightAccess().getStraightKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Straight__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Straight__Group__1__Impl
	rule__Straight__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getNameAssignment_1()); }
(rule__Straight__NameAssignment_1)
{ after(grammarAccess.getStraightAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Straight__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Straight__Group__2__Impl
	rule__Straight__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getPoweredAssignment_2()); }
(rule__Straight__PoweredAssignment_2)?
{ after(grammarAccess.getStraightAccess().getPoweredAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Straight__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Straight__Group__3__Impl
	rule__Straight__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getLengthAssignment_3()); }
(rule__Straight__LengthAssignment_3)
{ after(grammarAccess.getStraightAccess().getLengthAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Straight__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Straight__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getElevationChangeAssignment_4()); }
(rule__Straight__ElevationChangeAssignment_4)?
{ after(grammarAccess.getStraightAccess().getElevationChangeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Corner__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__0__Impl
	rule__Corner__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getCornerKeyword_0()); }

	'Corner' 

{ after(grammarAccess.getCornerAccess().getCornerKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Corner__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__1__Impl
	rule__Corner__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getNameAssignment_1()); }
(rule__Corner__NameAssignment_1)
{ after(grammarAccess.getCornerAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Corner__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__2__Impl
	rule__Corner__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getDirectionAssignment_2()); }
(rule__Corner__DirectionAssignment_2)
{ after(grammarAccess.getCornerAccess().getDirectionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Corner__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getTypeAssignment_3()); }
(rule__Corner__TypeAssignment_3)
{ after(grammarAccess.getCornerAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Cart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cart__Group__0__Impl
	rule__Cart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getCartKeyword_0()); }

	'Cart' 

{ after(grammarAccess.getCartAccess().getCartKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getNameAssignment_1()); }
(rule__Cart__NameAssignment_1)
{ after(grammarAccess.getCartAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
(rule__SignedInt__SignAssignment_0)?
{ after(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
(rule__SignedInt__ValueAssignment_1)
{ after(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__RollerCoasterAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); }
	ruleRollerCoaster{ after(grammarAccess.getModelAccess().getRollerCoasterRollerCoasterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRollerCoasterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__TrackAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackAlternatives_2_0()); }
(rule__RollerCoaster__TrackAlternatives_2_0)
{ after(grammarAccess.getRollerCoasterAccess().getTrackAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__CartAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_3_0()); }
	ruleCart{ after(grammarAccess.getRollerCoasterAccess().getCartCartParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RollerCoaster__TrackUnitLengthAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRollerCoasterAccess().getTrackUnitLengthINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getRollerCoasterAccess().getTrackUnitLengthINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStraightAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__PoweredAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getPoweredPoweredKeyword_2_0()); }
(
{ before(grammarAccess.getStraightAccess().getPoweredPoweredKeyword_2_0()); }

	'powered' 

{ after(grammarAccess.getStraightAccess().getPoweredPoweredKeyword_2_0()); }
)

{ after(grammarAccess.getStraightAccess().getPoweredPoweredKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__LengthAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getLengthINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getStraightAccess().getLengthINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Straight__ElevationChangeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStraightAccess().getElevationChangeSignedIntParserRuleCall_4_0()); }
	ruleSignedInt{ after(grammarAccess.getStraightAccess().getElevationChangeSignedIntParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCornerAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__DirectionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getDirectionAlternatives_2_0()); }
(rule__Corner__DirectionAlternatives_2_0)
{ after(grammarAccess.getCornerAccess().getDirectionAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getTypeAlternatives_3_0()); }
(rule__Corner__TypeAlternatives_3_0)
{ after(grammarAccess.getCornerAccess().getTypeAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cart__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCartAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getSignedIntAccess().getSignHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


